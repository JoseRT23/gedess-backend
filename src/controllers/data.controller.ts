import { Request, Response, NextFunction } from 'express';
import dataService from '../services/data.service';
import PdfPrinter from 'pdfmake';
import { TDocumentDefinitions } from 'pdfmake/interfaces';

const fonts = {
    Roboto: {
      normal: 'fonts/Roboto-Regular.ttf',
      bold: 'fonts/Roboto-Medium.ttf',
      italics: 'fonts/Roboto-Italic.ttf',
      bolditalics: 'fonts/Roboto-MediumItalic.ttf'
    }
  };

export class DataController {

    async searchData(req: Request, res: Response) {
        try {
          let { startdate, enddate } = req.query as any;
          const data = await dataService.searchData(startdate, enddate);
          res.status(200).send(data);
        } catch (error) {
            if (error instanceof Error) {
                console.log(error);
                res.status(500).send(error.message);
            }
        }
    }

    async getData(req: Request, res: Response) {
        try {
          const data = await dataService.getData();
          res.status(200).send(data);
        } catch (error) {
            if (error instanceof Error) {
                console.log(error);
                res.status(500).send(error.message);
            }
        }
    }

    async saveData(req: Request, res: Response, next: NextFunction) {
        try {
            const { value } = req.body;
            const data = await dataService.saveData(value);
            res.status(201).send(data);
        } catch (error) {
            next(error);
        }
    }

    async generateExcel(req: Request, res: Response, next: NextFunction) {

        const { startdate, enddate } = req.query as any;

        const workbook = await dataService.generateExcel(startdate, enddate)

        // Configurar el archivo para ser descargado
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.setHeader('Content-Disposition', 'attachment; filename=datos.csv');

        // Escribir el archivo en la respuesta
        await workbook.csv.write(res);
        res.end();
    }

    async generatePdf(req: Request, res: Response, next: NextFunction) {
        
        const { image } = req.body; // Recibir la imagen desde el frontend
        const printer = new PdfPrinter(fonts);
        const docDefinition: TDocumentDefinitions = {
            header: {
                text: 'Reporte temperatura',
                bold: true,
                alignment: 'center',
                margin: [ 5, 10, 5, 100 ]
            },
            footer: {
                text: 'generated by Gedess',
                alignment: 'right',
                margin: [ 10, 10 ]
            },
            content: [
                {
                    image: image,
                    width: 500,
                    margin: [ 5, 100, 5, 10 ]
                }
            ]
        };
    
        const pdfDoc = printer.createPdfKitDocument(docDefinition);
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename=reporte.pdf');
    
        pdfDoc.pipe(res);
        pdfDoc.end();
    }
}